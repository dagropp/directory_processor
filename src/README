dgropp




=============================
=      File description     =
=============================

- DirectoryProcessor - This class runs the program by executing the manager package factory.

* manager package: Executing the program and error handling *
    - DirectoryProcessorFactory -
        Runs the program, by validating the command line args, listing the file in the source folder, parsing the
        command file, and then prints output with the specified FILTER and ORDER commands. Using the following classes:
        - SourceDirectoryParser - Parses the source directory and lists the file in it, ignoring sub-folders.

* commandfileparser package: Parsing the command file *
    - CommandFileParserFactory -
        Factory that receives a command text file and parses it to a workable Command list. Using the following classes:
        - LinesConverter -     Gets a text file and converts its lines to LineWrapper array.
        - LineWrapper -        Creates a wrapper object with line's text and its original line number.
        - ReformatLines -      Reformats the lines array, by checking if it contains correct and valid command headers,
                               and by adding default commands to missing lines.
    * commandsgenerator sub-package: Generating CommandWrapper array *
        - CommandsGenerator -  Generates a CommandWrapper array from the reformatted lines list.
        - CommandWrapper -     Creates a wrapper object with FILTER and ORDER command wrappers.
        - ReformatExecutable - (Abstract) Represents reformatting guidelines and sets the required parameters.
            * Extended by:
            - ReformatFilter - This class reformats the filter String[], by checking if it contains correct and valid
                               name and parameters, and by replacing invalid filters with default filter (all).
            - ReformatOrder -  Reformats the order String[], by checking if it contains correct and valid name and
                               parameters, and by replacing invalid order with default order (abs).
        - ExecutableWrapper -  Interface for FILTER/ORDER command wrappers, to hold information on command (name,
                               negation, warnings, line number).
            * Implemented by:
            - OrderWrapper -   Creates a wrapper object with order's name, negation, warning and its original
                               line number.
            - FilterWrapper -  Creates a wrapper object with filter's name, parameters, negation, warning and its
                               original line number.

* filter package: Executing and formatting the filter commands *
    - FilterFactory -
    	Factory that receives a Command object and filters a files list using the specified command.
    The actual filter commands are structured in the following hierarchy:
    - Filter - Interface to unify all filter classes.
    - AbstractFilterNoParams implements Filter - (Abstract) Represents a basic filter command with no parameters.
        - FilterAll -                   Returns all files (or none, with negation).
        - AbstractFilterState -         (Abstract) Represents a basic filter command with YES/NO parameter.
            - FilterStateExecutable -   Returns all executable files (or its negation).
            - FilterStateHidden -       Returns all hidden files (or its negation).
            - FilterStateWritable -     Returns all writable files (or its negation).
        - AbstractFilterParams -        (Abstract) Represents a basic filter command with generic parameters.
            - AbstractFilterSize -      (Abstract) Represents a basic filter command with numeric Double parameters.
                - FilterSizeBetween -   Returns all files in between specified size a and b in KB (or its negation).
                - FilterSizeGreater -   Returns all files greater than specified size in KB (or its negation).
                - FilterSizeSmaller -   Returns all files smaller than specified size in KB (or its negation).
            - AbstractFilterValue -     (Abstract) Represents a basic filter command with String parameters.
                - FilterValueContains - Returns all files which their names contain specified input (or its negation).
                - FilterValueFileName - Returns all files which their names are equal to the specified input (or its
                                        negation).
                - FilterValuePrefix -   Returns all files which their names prefix equals the specified input (or its
                                        negation).
                - FilterValueSuffix -   Returns all files which their names suffix equals the specified input (or its
                                        negation).

* order package: Executing and formatting the order commands *
    - OrderFactory -
        Factory that receives a Command object and orders a files list using the specified command.
    The actual order commands are structured in the following hierarchy:
    - OrderFiles -         (Abstract) Sorts Files array, using MergeSort algorithm, while the actual comparator is
                           implemented in each child class.
        - OrderByAbsPath - (Singleton) Sorts Files according to absolute path.
    	- OrderBySize -    (Singleton) Sorts Files according to size, and if equal, according to absolute path.
    	- OrderByType -    (Singleton) Sorts Files according to type, and if equal, according to absolute path.

* type2errors package: Exception classes (extending Exception) for error handling *
    - FileException -            (Abstract) Represents a basic Exception for dealing with file errors.
        * Extended by:
        - DirectoryNotFound -    Thrown when specified directory not found.
        - FileNotFound -         Thrown when specified file not found.
        - NoReadPermission -     Thrown when can't read specified file/folder.
    - InputException -           (Abstract) Represents a basic Exception for dealing with input errors.
        * Extended by:
        - InvalidArgs -          Thrown when command line args are not in expected format.
        - InvalidCommandHeader - Thrown when FILTER/ORDER command headers are not in expected format.



=============================
=          Design           =
=============================
- Modularity -
    Each package has several modules. Each is independent of other modules, and serves single purpose. Each package has
    a factory class that handles these modules, and the manager package factory handles these factories. So, in the end
    each change or modification doesn't affect the functionality of the entire program.
- Single responsibility -
    Each class and module has a single purpose - Converts line to array, reformat it, validate it, etc. This way
    classes are understandable and not too long, and also it improves maintaining the separate modules.
- Factory -
    As stated above, each package has a factory class. Some only delegates instances for other classes, thus receiving
    input and returning required output and in the meanwhile using the package modules. Some use switch statements
    (filter and order factories) to determine which filter/order to call.
- Packages -
    Each modules family is nested in the same package, thus creating a more understandable structure.
- Abstraction - filter/order -
    Filters are more or less repetitive in structure. To avoid writing duplicate code, and also to allow polymorphism,
    I implemented filters with extensive hierarchy: On top of all an interface, then abstract classes, each
    representing a more specific filter. Then on top of the most specific abstract classes, I implemented very short
    filter classes (1 for each filter command) that inherit from them.
    Orders commands are basically the same, as they use the same algorithm, but their comparators are different. To
    handle this, I implemented an abstract order class with the sort algorithm, and an abstract comparator method,
    and then extending it with singleton classes (more on that below).
- Singleton -
    To allow in order commands both abstraction and it using static methods, thus not creating new order instances, I
    implemented a parent abstract class, and singleton child classes. These classes use the order abstract class, while
    implementing its own comparator, but are called statically.
- Extensibility -
    By abstracting the filter and order commands, I am allowing for more filter and orders to form. It only needs to be
    implemented and added to the factory methods.
- Exceptions -
    I implemented 2 abstract exception classes, that unify the child exceptions under 2 categories - file exceptions and
    input exceptions. By doing so, I could catch them using polymorphism and avoid catching other Exceptions by catching
    them all under Exception type.
- Minimal API -
    All class members are private. Methods that serve only this class are private, and methods that serve child classes
    are protected.



=============================
=  Implementation details   =
=============================
- Catching exceptions -
    Most exception catching is done in the manager package in the method that runs the whole program, thus making it
    easier to change future code, and add more exceptions in the future.
- Wrappers -
    To store more information on each data field, I implemented data wrappers that hold more information. For instance,
    when converting the file lines to array I wanted to keep its original line number to maintain the possibility of
    printing warnings. The commands needed more information, so I implemented wrapper interface that unifies them and
    storing parameters, line number, warning and negation. This approach helped me maintain order on lines and commands.
- Filter methods -
    I used java.util.Arrays stream filter that allows lambda expression filter methods, thus keeping the filters very
    small and efficient.
- Data structures -
    I found it easiest and most efficient to work with standard arrays, both for sorting and for filtering. On
    occasions I worked with ArrayList, but found them more awkward, and a bit slower.



=============================
=    Answers to questions   =
=============================
